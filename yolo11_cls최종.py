# -*- coding: utf-8 -*-
"""yolo11-cls최종.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1j4ZKoJpLa9hS7F5FX7p8tHOGoZzgJfvj

#데이터셋 임포트(test-5)
"""

!pip install roboflow

from roboflow import Roboflow
rf = Roboflow(api_key="68TRJG3oL0xut9Ks0kkD")
project = rf.workspace("ship-xallx").project("test-au9yp")
version = project.version(5)
dataset = version.download("yolov8")

"""#데이터셋 재조정 (6:3:1)"""

import os
import glob
import shutil
import random

original_root = "/content/test-5"
new_root = "/content/test-5-new-2"

# 원본 이미지 디렉토리들
train_img_dir = os.path.join(original_root, "train", "images")
valid_img_dir = os.path.join(original_root, "valid", "images")
test_img_dir = os.path.join(original_root, "test", "images")

os.makedirs(new_root, exist_ok=True)

img_extensions = ["*.jpg", "*.jpeg", "*.png", "*.bmp", "*.tif", "*.tiff"]

all_images = []
for ext in img_extensions:
    all_images.extend(glob.glob(os.path.join(train_img_dir, ext)))
    all_images.extend(glob.glob(os.path.join(valid_img_dir, ext)))
    all_images.extend(glob.glob(os.path.join(test_img_dir, ext)))

# 이미지 이름에 따라 클래스 결정
def get_class_from_name(img_name):
    # 소문자로 변환하여 체크(대소문자 구분 없이)
    lower_name = img_name.lower()
    if "fish" in lower_name:
        return "fish"
    elif "drift" in lower_name:
        return "drift"
    elif "move" in lower_name:
        return "move"
    else:
        return None  # 혹시라도 세 단어 중 하나도 포함하지 않는 경우

# (img_path, class_name) 리스트 생성
data_entries = []
for img_path in all_images:
    img_name = os.path.basename(img_path)
    cls = get_class_from_name(img_name)
    if cls is not None:
        data_entries.append((img_path, cls))

# 셔플
random.shuffle(data_entries)

total_count = len(data_entries)
train_count = int(total_count * 0.85)
valid_count = int(total_count * 0.15)
test_count = total_count - train_count - valid_count

train_entries = data_entries[:train_count]
valid_entries = data_entries[train_count:train_count+valid_count]
test_entries = data_entries[train_count+valid_count:]

def distribute(entries, split_name):
    for img_path, cls in entries:
        target_dir = os.path.join(new_root, split_name, cls)
        os.makedirs(target_dir, exist_ok=True)
        # 이미지만 복사
        shutil.copy(img_path, target_dir)

distribute(train_entries, "train")
distribute(valid_entries, "valid")
distribute(test_entries, "test")

print("재분배 완료!")
print(f"총 {total_count}개 -> Train:{train_count}, Valid:{valid_count}, Test:{test_count}")
print(f"생성된 데이터셋 경로: {new_root}")

"""#학습 코드(yolo11-cls)

"""

!pip install ultralytics
from ultralytics import YOLO

import os
import shutil

# 기존 데이터셋 경로와 새로운 데이터셋 경로
source_root = "test-5"
target_root = "test-5-new111"
keywords = ["fish", "drift", "move"]

# 파일 분류 및 복사 함수
def organize_files_by_keyword_exclude_labels(source_root, target_root, keywords):
    # 모든 하위 폴더 탐색
    for subdir, _, files in os.walk(source_root):
        # 'labels' 디렉터리는 제외
        if "labels" in subdir:
            continue

        for file in files:
            file_path = os.path.join(subdir, file)

            # 파일 이름에서 키워드 확인
            matched_keyword = next((keyword for keyword in keywords if keyword in file), None)
            if matched_keyword:
                # 새로운 디렉터리 경로 생성
                relative_path = os.path.relpath(subdir, source_root)  # 원래 경로의 상대 경로
                target_dir = os.path.join(target_root, relative_path.replace("images", matched_keyword))
                os.makedirs(target_dir, exist_ok=True)

                # 파일 복사
                shutil.copy(file_path, os.path.join(target_dir, file))
                print(f"Moved {file} to {target_dir}")

# 실행
organize_files_by_keyword_exclude_labels(source_root, target_root, keywords)

# YOLO 모델 로드
model = YOLO("yolo11n-cls.pt")

# Fine-tuning 실행 (선택 사항: 이미 Fine-tuning 완료된 모델이라면 생략 가능)
model.train(
    data="/content/test-5-new111",  # Fine-tuning 데이터 경로
    epochs=20,                   # Fine-tuning 에포크 수
    imgsz=224,                   # 입력 이미지 크기
    batch=16,                    # 배치 크기
    lr0=0.001,                   # 학습률
    project="/content/runs",
    name="yolov11_cls",
    workers=2
)



"""#평가지표 출력"""

import torch
from torch.utils.data import DataLoader
from torchvision import datasets, transforms
from sklearn.metrics import accuracy_score



# 모델 정의 및 로드
model = YOLO('yolo11m-cls.pt')  # 본인이 정의한 YOLOv11 모델 클래스
model.load_state_dict(torch.load('/content/runs/yolov11_cls2/weights/best.pt'))  # 가중치 경로
model.eval()  # 평가 모드로 전환

# 테스트 데이터셋 준비
test_transform = transforms.Compose([
    transforms.Resize((224, 224)),  # 모델 입력 크기
    transforms.ToTensor(),
    transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),
])

test_dataset = datasets.ImageFolder(root='path_to_test_data', transform=test_transform)
test_loader = DataLoader(test_dataset, batch_size=32, shuffle=False)

# 테스트 데이터로 정확도 확인
all_labels = []
all_predictions = []

with torch.no_grad():  # 그라디언트 계산 비활성화
    for images, labels in test_loader:
        outputs = model(images)  # 모델 예측
        predictions = torch.argmax(outputs, dim=1)  # 예측된 클래스
        all_labels.extend(labels.numpy())
        all_predictions.extend(predictions.numpy())

# 정확도 계산
accuracy = accuracy_score(all_labels, all_predictions)
print(f'Test Accuracy: {accuracy * 100:.2f}%')

model = YOLO("path/to/best.pt")
metrics = model.val()